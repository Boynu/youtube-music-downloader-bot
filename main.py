import sqlite3, datetime, asyncio, logging, os, eyed3, subprocess, traceback
from pytube import YouTube
from pytube import Playlist

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import RestrictChatMember
from aiogram.types import ChatActions
from aiogram.utils.markdown import hlink

token = ''

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot,storage=storage)

def check_numb(path):
	with open(path) as file:
		ids = file.read()
	ids = ids.split(' ')
	del ids[-1]
	return len(ids)

class go(StatesGroup):
	newlist = State()
	get = State()
	dell = State()
	clear = State()
	cho = State()

global connect
connect = sqlite3.connect('users.db', check_same_thread=False)
global cursor
cursor= connect.cursor()

@dp.message_handler(state=None)
async def start(message: types.Message,state: FSMContext):
	userid = message.chat.id
	if message.text == '/start':
		today = datetime.datetime.today()
		f = '–°—Ç–∞—Ä—Ç '+ str(message.chat.id) + ' ' + today.strftime("%Y-%m-%d-%H.%M.%S")
		print(f)
		
		cursor.execute("""CREATE TABLE IF NOT EXISTS users(
				id INTEGER, username TEXT
			)""")
		connect.commit()

		cursor.execute(f"SELECT * FROM users WHERE id = {userid}")
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO users(id, username) VALUES(?,?);", (message.chat.id, message.chat.username,))
			connect.commit()
			os.mkdir(str(userid))
			with open(f'{userid}/ids.txt', 'w') as file:
				pass

		await mainmenu(message, state)


	elif 'youtube' in message.text:
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		markup.row(types.KeyboardButton(f'–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ [{check_numb(f"{userid}/ids.txt")}]'))
		dirs = os.listdir(f'{userid}/')
		dirs.remove('ids.txt')
		try:
			for name in dirs:
				markup.row(types.KeyboardButton(f'{name[:-4]} [{check_numb(f"{userid}/{name}")}]'))
		except:
			pass
		await bot.send_message(message.chat.id, 'üëá–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏','HTML', reply_markup = markup)
		async with state.proxy() as data:
			data['url'] = message.text
		await go.cho.set()

	elif message.text == 'üìÇ–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Å–∫–∞—á–µ–Ω–Ω—É—é –º—É–∑—ã–∫—É' or message.text == '/get':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		markup.row(types.KeyboardButton(f'–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ [{check_numb(f"{userid}/ids.txt")}]'))
		dirs = os.listdir(f'{userid}/')
		dirs.remove('ids.txt')
		for name in dirs:
			markup.row(types.KeyboardButton(f'{name[:-4]} [{check_numb(f"{userid}/{name}")}]'))
		await bot.send_message(message.chat.id,'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞ –ª–∏–±–æ —Å–∫–∞—á–∏–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <i>"üßπ–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"</i> –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç','HTML', reply_markup = markup)
		await go.get.set()

	elif message.text == '/del':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		dirs = os.listdir(f'{userid}/')
		dirs.remove('ids.txt')
		for name in dirs:
			markup.row(types.KeyboardButton(f'{name[:-4]} [{check_numb(f"{userid}/{name}")}]'))
		await bot.send_message(message.chat.id, 'üóë–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=markup)
		await go.dell.set()

	elif message.text == '/clear':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		markup.row(types.KeyboardButton(f'–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ [{check_numb(f"{userid}/ids.txt")}]'))
		dirs = os.listdir(f'{userid}/')
		dirs.remove('ids.txt')
		try:
			for name in dirs:
				markup.row(types.KeyboardButton(f'{name[:-4]} [{check_numb(f"{userid}/{name}")}]'))
		except:
			pass
		await bot.send_message(message.chat.id, 'üßπ–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏', reply_markup=markup)
		await go.clear.set()

	elif message.text == '/help':
		await bot.send_message(message.chat.id, 'üì∞–°–ø—Ä–∞–≤–∫–∞:\n\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/get - –í—Å–µ —Å–∫–∞—á–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏\n/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–µ—Å–Ω–∏\n/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç\n/del - –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç')
	
	elif message.text == '/create' or message.text == '‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç':
		if len(os.listdir(f'{userid}/')) < 7:
			await bot.send_message(message.chat.id, '‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞', reply_markup = types.ReplyKeyboardRemove())
			await go.newlist.set()
		else:
			await bot.send_message(message.chat.id, '‚ùå–£ –≤–∞—Å –±–æ–ª—å—à–µ 5 –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤!')

async def mainmenu(message, state):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	markup.row(types.KeyboardButton('üìÇ–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Å–∫–∞—á–µ–Ω–Ω—É—é –º—É–∑—ã–∫—É'))
	markup.row(types.KeyboardButton('‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'))
	
	userid = message.chat.id
	text = 'üéµüîó–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç (–ò–∑ youtube.com –∏–ª–∏ music.youtube.com)\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\nüì∞–°–ø—Ä–∞–≤–∫–∞ /help'
	await bot.send_message(message.chat.id, text, reply_markup=markup)

async def check(message, url, state, play):
	userid = message.chat.id
	if 'playlist' in url:
		await plalist(url, str(userid), message, play)
	else:
		for link in url.split(' '):
			try:
				await download(link, str(userid), message, play)
			except:
				await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Å–Ω–∏')
	await mainmenu(message, state)


def matadata(path,name,author):
	audio_file = eyed3.load(path)
	audio_file.tag.title = name
	audio_file.tag.artist = author
	audio_file.tag.save()

def convert(mp4,mp3):
	command = ['ffmpeg', '-fflags', '+genpts','-i', mp4, '-vn', '-acodec', 'libmp3lame', '-q:a', '2', mp3]
	subprocess.run(command)

async def download(url, name, message, play):
	userid = message.chat.id
	try:
		video = YouTube(url)
		start_d = await bot.send_message(message.chat.id, f'üíæ–ù–∞—á–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ <i>{video.title}</i>', 'HTML', reply_markup=types.ReplyKeyboardRemove())
		if video.length > 1800:
			await bot.send_message(message.chat.id, f'‚ùå<i>{video.title}</i> –¥–ª–∏—Ç—Å—è –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç!', 'HTML')
		else:
			await bot.send_chat_action(message.chat.id, ChatActions.UPLOAD_VOICE)
			audio = video.streams.filter(only_audio = True).first()
			name_path = audio.download(name+'/')
			mp3 = f"{name}/{video.title}.mp3"
			convert(name_path, mp3)
			matadata(f"{name}/{video.title}.mp3",video.title,video.author)
			file = await bot.send_audio(message.chat.id,audio=open(f"{name}/{video.title}.mp3", 'rb'))
			file_id = file.audio.file_id
			with open(f'{userid}/{play}', 'a') as file:
				file.write(file_id+' ')
			os.remove(name_path)
			os.remove(f"{name}/{video.title}.mp3")
	except Exception:
		traceback.print_exc()
		raise ValueError('–û—à–∏–±–∫–∞')
	await start_d.delete()

async def plalist(url, name, message, play):
	p = Playlist(url)
	text = f'üì•–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ <i>{p.title}</i>'
	await bot.send_message(message.chat.id, text, 'HTML')
	for file in p.video_urls:
		try:
			await download(file, name, message, play)
		except ValueError:
			await bot.send_message(message.chat.id,'‚ùå–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')


@dp.message_handler(state=go.newlist)
async def newlist(message, state: FSMContext):
	userid = message.chat.id
	name = message.text
	if name+'.txt' in os.listdir(f'{userid}/'):
		await bot.send_message(message.chat.id, '‚ùå–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
	else:
		with open(f'{userid}/{name}.txt', 'w') as file:
			pass
		await bot.send_message(message.chat.id, f'‚úÖ–ü–ª–µ–π–ª–∏—Å—Ç <i>{name}</i> —Å–æ–∑–¥–∞–Ω', 'HTML')
	await state.finish()
	await mainmenu(message, state)

@dp.message_handler(state=go.get)
async def get(message, state: FSMContext):
	userid = message.chat.id
	name = (message.text).split(' [')[0] 
	name += '.txt'

	if name == '–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ.txt':
		with open(f'{userid}/ids.txt') as file:
			ids = file.read()
		ids = ids.split(' ')
		del ids[-1]
		for idd in ids:
			await bot.send_audio(message.chat.id, audio=idd, reply_markup=types.ReplyKeyboardRemove())
	elif name in os.listdir(f'{userid}/'):
		with open(f'{userid}/{name}') as file:
			ids = file.read()
		ids = ids.split(' ')
		del ids[-1]
		for idd in ids:
			await bot.send_audio(message.chat.id, audio=idd, reply_markup=types.ReplyKeyboardRemove())
	else:
		await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
	await state.finish()
	await mainmenu(message, state)


@dp.message_handler(state=go.dell)
async def dell(message, state: FSMContext):
	userid = message.chat.id
	name = (message.text).split(' [')[0] 
	name += '.txt'

	if name in os.listdir(f'{userid}/'):
		os.remove(f'{userid}/{name}')
		await bot.send_message(message.chat.id, '‚úÖ–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
	elif name == 'ids.txt':
		await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞. –¢–∞–∫ –Ω–µ–ª—å–∑—è)')
	else:
		await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
	await state.finish()
	await mainmenu(message, state)

@dp.message_handler(state=go.clear)
async def clear(message, state: FSMContext):
	userid = message.chat.id
	name = (message.text).split(' [')[0] 
	name += '.txt'
	if name == '–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ.txt':
		with open(f'{userid}/ids.txt', 'w') as file:
			file.write('')
		await bot.send_message(message.chat.id, '‚úÖ–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
	elif name in os.listdir(f'{userid}/'):
		with open(f'{userid}/{name}', 'w') as file:
			file.write('')
		await bot.send_message(message.chat.id, '‚úÖ–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
	else:
		await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
	await state.finish()
	await mainmenu(message, state)

@dp.message_handler(state=go.cho)
async def cho(message, state: FSMContext):
	async with state.proxy() as data:
		url = data['url']
	await state.finish()
	userid = message.chat.id
	name = (message.text).split(' [')[0] 
	name += '.txt'
	if name == '–ü–õ–ï–ô–õ–ò–°–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ.txt':
		await check(message, url, state, 'ids.txt')
	elif name in os.listdir(f'{userid}/'):
		await check(message, url, state, name)
	else:
		await bot.send_message(message.chat.id, '‚ùå–û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')




######
async def main():
	await dp.start_polling(bot)


if __name__ == '__main__':
	asyncio.run(main())